name: Publish Docker image

on:
  release:
    types: [published]
  workflow_dispatch: {}

jobs:
  push_to_registries:
    name: Push Docker image to multiple registries
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    strategy:
      matrix:
        image: [comfyui, nginx, ollama] # , rvc]
    steps:
      - name: Remove unused software
        run: |
          echo "Available storage before:"
          sudo df -h
          echo
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          echo "Available storage after:"
          sudo df -h
          echo

      - name: Check out the repo
        uses: actions/checkout@v4

      # TODO: add QEMU when we start supporting ARM

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # name: Log in to Docker Hub
      # uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      # with:
      #   username: ${{ secrets.DOCKER_USERNAME }}
      #   password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: |
            ghcr.io/thalisai/thalis-${{ matrix.image }}

      - name: Build and push Docker images
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: containers/Dockerfile.${{ matrix.image }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          ssh: default=${{ env.SSH_AUTH_SOCK }}
          cache-from: type=registry,ref=${{ steps.meta.outputs.tags }}
          cache-to: type=registry,ref=${{ steps.meta.outputs.tags }},mode=max

      # name: Generate artifact attestation
      # uses: actions/attest-build-provenance@v2
      # with:
      #   subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      #   subject-digest: ${{ steps.push.outputs.digest }}
      #   push-to-registry: true
